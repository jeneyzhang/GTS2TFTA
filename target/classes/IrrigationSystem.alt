block FlattenIrrigationSystem
    ComponentState V1.s(init = WORKING);
	ComponentState V2.s(init = WORKING);
	ComponentState V3.s(init = WORKING);
	ComponentState P1.s(init = WORKING);
	ComponentState P2.s(init = WORKING);
	Boolean V3.isClosed(init = TRUE);
	Boolean V2.isClosed(init = TRUE);
	Boolean V1.isClosed(init = FALSE);
	Boolean P1.upStream(reset = TRUE);
	Boolean P2.upStream(reset = TRUE);
	Boolean P1.downStream(reset = FALSE);
	Boolean P2.downStream(reset = FALSE);
	Boolean F1.inStream(reset = FALSE);
	Boolean F2.inStream(reset = FALSE);
	Boolean F3.inStream(reset = FALSE);
	Boolean V1.leftStream(reset = FALSE);
	Boolean V2.leftStream(reset = FALSE);
	Boolean V3.leftStream(reset = FALSE);
	Boolean V1.rightStream(reset = FALSE);
	Boolean V2.rightStream(reset = FALSE);
	Boolean V3.rightStream(reset = FALSE);
	event V1.open;
	event V2.open; 
	event V3.open; 
	event V1.close; 
	event V2.close; 
	event V3.close;
	event V1.failure; 
	event V2.failure; 
	event V3.failure; 
	event P1.failure; 
	event P2.failure;
	event ccf;
	transition V1.open : V1.isClosed and V1.s == WORKING -> V1.isClosed := FALSE;
	transition V2.open : V2.isClosed and V2.s == WORKING -> V2.isClosed := FALSE;
	transition V3.open : V3.isClosed and V3.s == WORKING -> V3.isClosed := FALSE;
	transition V1.close : not V1.isClosed and V1.s == WORKING -> V1.isClosed := TRUE;
	transition V2.close : not V2.isClosed and V2.s == WORKING -> V2.isClosed := TRUE;
	transition V3.close : not V3.isClosed and V3.s == WORKING -> V3.isClosed := TRUE;
	transition V1.failure : V1.s == WORKING -> V1.s := FAILED;
	transition V2.failure : V2.s == WORKING -> V2.s := FAILED;
	transition V3.failure : V3.s == WORKING -> V3.s := FAILED;
	transition P1.failure : P1.s == WORKING -> P1.s := FAILED;
	transition P2.failure : P2.s == WORKING -> P2.s := FAILED;
	transition ccf : P1.s == WORKING or P2.s == WORKING -> {if P1.s == WORKING then P1.s := FAILED;if P2.s == WORKING then P2.s := FAILED;};
	assertion if P1.s == WORKING and P1.upStream then P1.downStream := TRUE;
	assertion if P2.s == WORKING and P2.upStream then P2.downStream := TRUE;
	assertion if not V1.isClosed then V1.leftStream := V1.rightStream;
	assertion if not V1.isClosed then V1.rightStream := V1.leftStream;
	assertion if not V2.isClosed then V2.leftStream := V2.rightStream;
	assertion if not V2.isClosed then V2.rightStream := V2.leftStream;
	assertion if not V3.isClosed then V3.leftStream := V3.rightStream;
	assertion if not V3.isClosed then V3.rightStream := V3.leftStream;
	assertion V1.rightStream := V2.leftStream;
	assertion V2.leftStream := V1.rightStream;
	assertion V2.rightStream := V3.rightStream;
	assertion V3.rightStream := V2.rightStream;
	assertion V3.leftStream := V1.leftStream;
	assertion V1.leftStream := V3.leftStream;
	assertion V3.rightStream := P2.downStream;
	assertion P2.downStream := V3.rightStream;
	assertion V3.leftStream := P1.downStream;
	assertion P1.downStream := V3.leftStream;
	assertion F1.inStream := P1.downStream;
	assertion F2.inStream := P2.downStream;
	assertion F3.inStream := V1.rightStream;
end